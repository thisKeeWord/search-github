{"version":3,"sources":["components/Icon.js","components/SearchResultListItem.js","components/SearchBar.js","App.js","registerServiceWorker.js","index.js"],"names":["Icon","src","alt","SearchResultStyles","styled","li","SearchResultListItem","login","avatarURL","githubURL","href","target","className","SearchBarStyles","div","SearchBar","state","searchTerm","results","error","handleChange","bind","toggleResults","event","a","preventDefault","axios","get","this","users","setState","data","items","message","value","length","map","result","index","avatar_url","html_url","type","id","onSubmit","placeholder","onChange","onClick","renderResults","Component","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","catch","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","fetch","response","status","headers","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.4f76bf26.chunk.js","sourcesContent":["import React from 'react'\n\nexport default function Icon() {\n  return (<img src='./images/icon-search.svg' alt=\"search\" />)\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst SearchResultStyles = styled.li`\n  background-color: #F2F2F6;\n  height: 96px;\n  border-top: 1px solid #CECEDF;\n  \n\n  a {\n    display: flex;\n    text-decoration: none;\n\n    &:hover {\n      background-color: #EBECEE;\n    }\n\n    & > img {\n      height: 64px;\n      width: 64px;\n      margin: 16px;\n    }\n\n    & > .description {\n      display: flex;\n      flex-direction: column;\n      justify-content: center;\n\n      & > .login {\n        color: #5B5894;\n      }\n\n      & > .github {\n        color: #7D7D9E;\n        font-size: 12px;\n      }\n    }\n  }\n`\n\nexport default function SearchResultListItem({\n  login,\n  avatarURL,\n  githubURL,\n}) {\n  return (\n    <SearchResultStyles>\n      <a href={githubURL} target=\"_blank\">\n        <img src={avatarURL} alt=\"avatar\" />\n        <div className=\"description\">\n          <span className=\"login\">{login}</span>\n          <span className=\"github\">{githubURL}</span>\n        </div>\n      </a>\n    </SearchResultStyles>\n  )\n}\n","import React, { Component } from 'react'\nimport styled from 'styled-components'\nimport axios from 'axios'\nimport Icon from './Icon'\nimport SearchResultListItem from './SearchResultListItem'\n\nconst url = 'https://api.github.com/search/users'\n\nconst SearchBarStyles = styled.div`\n  box-shadow: 3px 3px 3px 3px #373850;\n  width: 50%;\n  box-sizing: border-box;\n  border-radius: 5%;\n\n  .search {\n    display: flex;\n    align-items: center;\n    width: 100%;\n\n    & > input {\n      height: 48px;\n      padding: 16px;\n      border: none;\n      box-sizing: border-box;\n      flex: 1;\n\n      &:focus {\n        outline: none;\n      }\n    }\n\n    & > button {\n      height: 48px;\n      width: 48px;\n      padding: 0;\n      background-color: lightgreen;\n      border: none;\n\n      &:focus {\n        outline: none;\n      }\n    }\n  }\n\n  ul {\n    list-style: none;\n    padding: 0;\n    margin: 0;\n    max-height: 384px;\n    overflow-y: scroll;\n  }\n`\n\nclass SearchBar extends Component {\n  constructor() {\n    super()\n\n    this.state = {\n      searchTerm: '',\n      results: [],\n      error: ''\n    }\n\n    this.handleChange = this.handleChange.bind(this)\n    this.toggleResults = this.toggleResults.bind(this)\n\n  }\n\n  async toggleResults(event) {\n    event.preventDefault()\n\n    try {\n      const users = await axios.get(`${url}?q=${this.state.searchTerm}`)\n      this.setState({ results: users.data.items, error: '' })\n    } catch (error) {\n      this.setState({ results: [], error: error.message })\n    }\n  }\n\n  handleChange(event) {\n    this.setState({ searchTerm: event.target.value })\n  }\n\n  renderResults() {\n    return (this.state.results.length)\n      ? <ul>\n        {\n          this.state.results.map((result, index) => (\n            <SearchResultListItem\n              key={result.id}\n              login={result.login}\n              avatarURL={result.avatar_url}\n              githubURL={result.html_url}\n              type={result.type}\n            />\n          ))\n        }\n      </ul>\n      : null\n  }\n\n  render() {\n    return (\n      <SearchBarStyles>\n        {this.state.error && <span>{this.state.error}</span>}\n        <form className=\"search\" onSubmit={this.toggleResults}>\n          <input\n            type=\"text\"\n            value={this.state.searchTerm}\n            placeholder=\"Enter a github username...\"\n            onChange={this.handleChange}\n          />\n          <button\n            onClick={this.toggleResults}\n          >\n            <Icon className=\"whiteGlass\" />\n          </button>\n        </form>\n        {this.renderResults()}\n      </SearchBarStyles>\n    )\n  }\n}\n\nexport default SearchBar\n","import React, { Component } from 'react'\nimport SearchBar from './components/SearchBar'\nimport './App.css'\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"container\">\n        <h3>Github Search</h3>\n        <SearchBar />\n      </div>\n    )\n  }\n}\n\nexport default App\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.1/8 is considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n)\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl)\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.')\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\n\nimport App from './App'\nimport registerServiceWorker from './registerServiceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\nregisterServiceWorker()\n"],"sourceRoot":""}